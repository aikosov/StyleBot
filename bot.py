from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from aiogram import F
from aiogram.client.default import DefaultBotProperties
import asyncio
import os
import time

from config import BOT_TOKEN
from style_processor import stylize_image


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(
    BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

    
dp = Dispatcher(storage=MemoryStorage())

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üé® –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")],
        [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"), KeyboardButton(text="üìä –ë–∞–ª–∞–Ω—Å")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
)

 
# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
style_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üé¨ –î–∏—Å–Ω–µ–π", callback_data="style_disney")],
        [InlineKeyboardButton(text="üå∏ –ì–∏–±–ª–∏", callback_data="style_ghibli")],
        [InlineKeyboardButton(text="üíõ –°–∏–º–ø—Å–æ–Ω—ã", callback_data="style_simpsons")],
        [InlineKeyboardButton(text="üé≠ South Park", callback_data="style_southpark")],
        [InlineKeyboardButton(text="üï∂ –ö–∏–±–µ—Ä–ø–∞–Ω–∫ 2077", callback_data="style_cyberpunk")],
        [InlineKeyboardButton(text="üé® –í–∞–Ω –ì–æ–≥", callback_data="style_vangogh")]
    ]
)

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
format_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üåÅ –ö–≤–∞–¥—Ä–∞—Ç 1:1, 1024—Ö1024", callback_data="format_1024x1024")],
        [InlineKeyboardButton(text="üñ•Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π 16:9, 1792—Ö1024", callback_data="format_1792x1024")],
        [InlineKeyboardButton(text="üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π 9:16, 1024—Ö1792", callback_data="format_1024x1792")]
    ]
)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
# –ó–¥–µ—Å—å –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å {user_id: {"image_path": ..., "style": ...}}
user_sessions = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n\n"
        "–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –í–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Å—Ç–∏–ª—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ –∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤.\n\n"
        "üéÅ –í—ã –º–æ–∂–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–µ–Ω—å.\n"
        "üí° –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ? –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá",
        reply_markup=main_kb
    )

# –ü—Ä–∏–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id
   # await message.answer("üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:", reply_markup=style_buttons)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = f"temp/{user_id}_{int(time.time())}.jpg"
    await bot.download_file(file.file_path, destination=file_path)

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    user_sessions[user_id] = {"image_path": file_path}

    await message.answer("üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:", reply_markup=style_kb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
@dp.callback_query(F.data.startswith("style_"))
async def handle_style(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    style_key = callback.data.replace("style_", "")
     #style = callback.data.replace("style_", "")
   # await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∏–ª—å: <b>{style.capitalize()}</b>\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –í–∞—à–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
   # await callback.answer()

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∏–ª—å
    if user_id in user_sessions:
        user_sessions[user_id]["style"] = style_key
        await callback.message.answer("‚úÖ –°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=format_kb)
    else:
        await callback.message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.callback_query(F.data.startwith("format_"))
async def handle_format(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    format_size = callback.data.replace("format_", "")

    if user_id not in user_sessions or "style" not in user_sessions[user_id]:
        await callback.message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å.")
        await callback.answer()
        return

    session = user_sessions[user_id]
    image_path = session["image_path"]
    style = session["style"]

    await callback.message.answer("üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    result_url = await stylize_image(image_path, style, format_size)

    if result_url:
        await callback.message.answer_photo(photo=result_url, caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    else:
        await callback.message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    try:
        os.remove(image_path)
    except:
        pass

    # –°–±—Ä–æ—Å–∏–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions.pop(user_id, None)

    await callback.answer()




   






# –ó–∞–ø—É–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
    
